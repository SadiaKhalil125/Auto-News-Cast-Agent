import os
import pickle
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.auth.transport.requests import Request
from nodes.newsstate import NewsState
# Step 1: Constants
CLIENT_SECRET_FILE = "client_secret_551178829302-3pi2268lsrg4ut1u8d36n7pf4d52163p.apps.googleusercontent.com.json"
VIDEO_FILE = "video_697bbed1.mp4"
SCOPES = ["https://www.googleapis.com/auth/youtube.upload"]

# Step 2: Load cached token or initiate auth
def get_authenticated_service():
    credentials = None
    if os.path.exists("token.pickle"):
        with open("token.pickle", "rb") as token:
            credentials = pickle.load(token)

    if not credentials or not credentials.valid:
        if credentials and credentials.expired and credentials.refresh_token:
            credentials.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRET_FILE, SCOPES)
            # Use a fixed port that matches the one in Google Cloud Console
            credentials = flow.run_local_server(port=8888) 
        with open("token.pickle", "wb") as token:
            pickle.dump(credentials, token)

    return build("youtube", "v3", credentials=credentials)
    
# Step 3: Upload video
def upload_video(state:NewsState):
    youtube = get_authenticated_service()
    request_body = {
        "snippet": {
            "title": state['title'],
            "description": state['description'],
            "tags": ["AutoGenerated", "LangGraph", "Python Upload"],
            "categoryId": "22"  # Category ID 22 = People & Blogs
        },
        "status": {
            "privacyStatus": "unlisted",  # or "public" or "private"
        }
    }

    media = MediaFileUpload(state['video_path'], resumable=True)

    request = youtube.videos().insert(
        part="snippet,status",
        body=request_body,
        media_body=media
    )

    response = request.execute()

    return {'upload_status' : "uploaded"}
